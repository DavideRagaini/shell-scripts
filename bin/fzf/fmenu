#!/bin/bash

export FZF_DEFAULT_OPTS="--layout=reverse \
--info=inline \
--height=100% \
--multi \
--prompt='» ' \
--pointer='▶' \
--marker='✓' \
--bind '?:toggle-preview' \
--bind 'ctrl-space:print-query' \
--bind 'ctrl-a:select-all' \
--bind 'ctrl-y:execute-silent(echo {+} | xclip -selection clipboard -i)' \
--bind 'ctrl-r:replace-query' \
--bind 'ctrl-e:execute(vim {+})'
--bind 'ctrl-v:execute(bat {+})'"
# --preview-window=:nohidden \
# --preview \"fzf-previewer {}\"

input=$(mktemp -u --suffix .fzfmenu.input)
output=$(mktemp -u --suffix .fzfmenu.output)
mkfifo "$input"
mkfifo "$output"
chmod 600 $input $output

SIZE=16
mod_x=$SIZE
mod_y=$((SIZE*5))
padding=$SIZE

dim_screen="$(xrandr | awk '/current/ {sub(",","",$10); print $8$9$10}')"
dim_mon_x=$(echo "$dim_screen" | cut -d'x' -f1)
dim_mon_y=$(echo "$dim_screen" | cut -d'x' -f2)

rows=$((padding + (dim_mon_x / mod_x)))
colums=$((padding + (dim_mon_y / mod_y)))
GEOM="$(printf "%dx%d" "$rows" "$colums")"
FONT="Fantasque Sans Mono:size=$SIZE:style=Bold"
FLOATING_TERMINAL='st -c fzfmenu -n fzfmenu '
EXEC_FLAG=' -e '

while getopts "fbiSMBpc:l:w:f:g:e:" opt; do case "${opt}" in
    i) FZF_OPTS="$FZF_OPTS -$opt"  ;;
    l) FZF_OPTS="$FZF_OPTS --height $OPTARG" ;;
    p) FZF_OPTS="$FZF_OPTS --header $OPTARG" ;;
    g) GEOM="$OPTARG" ;;
    f) FONT="$OPTARG" ;;
    c) FLOATING_TERMINAL='fzf' ;;
    e) EXEC_FLAG="$OPTARG" ;;
    S) GEOM="50x20" ;;
    M) GEOM="10x30" ;;
    B) GEOM="130x40" ;;
    w) TERM_OPTS="-into $OPTARG" ;;
    b) printf '%s\n' "${0##*/}: option $opt ignored" ;;
    *) printf '%s\n' "${0##*/}: invalid option $opt" >&2 ; exit 1 ;;
esac done
shift $(( OPTIND -1 ))

FZF_OPTS="$FZF_OPTS $FZF_MENU_OPTS $FZF_COLORS"
export FZF_OPTS

$FLOATING_TERMINAL $TERM_OPTS -g "$GEOM" -f "$FONT" $EXEC_FLAG sh -c "cat $input | \
    fzf $FZF_OPTS | \
    tee $output" & disown

termPID=$!

# consume stdin into named pipe
cat > "$input"

for arg in "$@"; do
    # if it's a pipe then drain it to input
    [ -p "$arg" ] && { cat "$arg" > "$input"; };
done

# handle ctrl+c outside child terminal window
cleanup() {
    if kill -0 "$termPID" 2>/dev/null; then
        kill $termPID 2>/dev/null
    fi
    rm -f "$input $output"
}
trap cleanup EXIT

cat "$output"
