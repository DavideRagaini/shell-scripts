#!/bin/sh

usage() {
    cat << EOF
USAGE:
    cbzmerger [-h] -i input-name -o output name -t tempdir [-p 4] [-s 1000]
    cbzmerger [-h] -a input name -t tempdir [-p 4] [-s 1000]

DESCRIPTION:
    Levereges GNU Parallel for the fastest execution (check it out is awesome).
    Parallelize extraction creating -p 'n' jobs (default: nproc).
    Merges files extracted into chunks containing -s 'm' max files (default: 2000).
    Tests each file produced using zip -T.
    If no temp dir is given, creates automatically mktemp directory and cleans it at exit time
        (without eventual errors).

OPTIONS:
    -h              this help page.
    -i value        input folder.
    -o value        output name.
    -a value        use the same given name as input and output (short for -i same-name -o same-name).
    -t value        temp dir name (default: mktemp).
    -p value        number of extraction jobs (default: nproc).
    -s value        split output file into smaller each containing [OPTARG] files (default: 2000).
EOF
    exit 0
}

while getopts "hi:a:A:o:t:p:s:" opt
do case "${opt}" in
    h) usage ;;
    a) INPUT=${OPTARG}
       OUTPUT=${INPUT}
       [ -z "$INPUT" ] &&
           echo 'Input/Output parameters required. See --help '&&
           exit 1 ;;
    A) TEMP_DIR="$OPTARG"
       mkdir -p "$TEMP_DIR"
       INPUT="$OPTARG-split"
       [ -z "$INPUT" ] &&
           echo 'Input/Output parameters required. See --help '&&
           exit 1
       OUTPUT=${OPTARG}
       mv "$OPTARG" "$INPUT"
       ;;
    i) INPUT=${OPTARG}
       [ -z "$INPUT" ] &&
           echo 'Input parameter required. See --help '&&
           exit 1 ;;
    o) OUTPUT=${OPTARG}
       [ -z "$OUTPUT" ] &&
           echo 'Output parameter required. See --help' &&
           exit 1 ;;
    p) PROCS="$OPTARG" ;;
    t) TEMP_DIR=${OPTARG}
       mkdir -p "$TEMP_DIR" ;;
    s) SPLIT_EACH="${OPTARG}" ;;
    *) usage ;;
esac; done

[ -z "$TEMP_DIR" ] &&
    echo "Using mktemp" &&
    TEMP_DIR="$(mktemp -d /tmp/cbzmerge.XXXXXX)" &&
    echo "Cleaning afterward $TEMP_DIR" &&
    trap 'rm -rf -- "$TEMP_DIR"' EXIT
printf "Working Directory: %s\nExtracting files\n" "$TEMP_DIR"

find "$INPUT" -type f -iname "*.cbz" |
    parallel --progress -j"${PROCS:-$(nproc)}" unzip -qn -d "$TEMP_DIR/{/.}" {} # >/dev/null 2>&1
printf "Done Extracting\nMerging files\n"

find "$TEMP_DIR" -type f | sort -V |
    parallel --progress --keep-order --pipe -N "${SPLIT_EACH:-2000}" zip -qDur -@ "$OUTPUT{#}"
parallel mv "{}" "{.}.cbz" ::: $OUTPUT*[0-9].zip
echo 'Testing output file'
parallel --progress zip -T ::: $OUTPUT*[0-9].cbz
