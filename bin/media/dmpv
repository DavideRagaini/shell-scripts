#!/bin/bash

PATH_QUEUE="$HOME/.config/mpv/queue"
PATH_LAST="$HOME/.config/mpv/last"
PATH_MUSIC="$HOME/.config/mpv/music"
TITLE=""
CHANNEL=""
GEOM=""
export TMPDIR="/tmp/dmpv"

get_title() {
    INFO="$(yt-dlp --playlist-end=1 --print "%(uploader,channel)-25s%(playlist_title,title)-100s" $URL)"
	[ -z "$INFO" ] && notify-send "could not retrieve title" && exit
}

add_to_queue() {
	PLAYLIST="$(» | dmenu -p "Name of the playlist?")"
	[ -z "$PLAYLIST" ] && PLAYLIST="1shot"
	get_title
	notify-send "$PLAYLIST» $INFO" "$URL"
	printf "%s» %s “%-15s” %s\\t%s\\n" "$PLAYLIST" "$INFO" "$(date '+%k:%M %d/%m/%y')" "$URL" >>"$PATH_QUEUE"
	sort -u "$PATH_QUEUE" -o "$PATH_QUEUE"
}

floating() {
	dim_screen="$(xrandr | awk '/current/ {sub(",","",$10); print $8$9$10}')"
	dim_mon_x="$(echo "$dim_screen" | cut -d'x' -f1)"
	dim_mon_y="$(echo "$dim_screen" | cut -d'x' -f2)"
	dim_w_x="$((dim_mon_x / 6))"
	dim_w_y="$((dim_mon_y / 6))"
	x_padding=3
	y_padding=3
	x="$((dim_mon_x - dim_w_x - x_padding))"
	y="$((dim_mon_y - dim_w_y - y_padding))"
	GEOM="$(printf "%sx%s+%s+%s" "$dim_w_x" "$dim_w_y" "$x" "$y")"
}

save_to_last() {
	printf "%-14s\t%s\t%-70s\n%s" \
		"$(date '+%k:%M %d/%m/%y')" \
		"$(yt-dlp --playlist-end=1 --print "%(uploader,channel)-25s%(playlist_title,title)-100s" $1)" \
		"$1" \
		"$(cat "$PATH_LAST")" >"$PATH_LAST"
}

fplay() {
	check_ts
	notify-send "Working on:" "$INFO\\n$URL"
	export TS_SOCKET="$TMPDIR/video_socket"
	export TS_SLOTS=2
	mkdir -p $TMPDIR /tmp/thumbfast
	if command -v pipe-viewer >/dev/null 2>&1; then
		$TASK_SPOOLER -L "$INFO" pipe-viewer "$URL" >/dev/null 2>&1
	elif grep -q -e yewtu -e youtube; then
		floating
		mpv --quiet --video=auto --geometry="$GEOM" --x11-name="mpvFloat" "$URL" >/dev/null 2>&1
	else
		floating
		$TASK_SPOOLER -L "$INFO" mpv --quiet --video=auto --geometry="$GEOM" --x11-name="mpvFloat" "$URL" >/dev/null 2>&1
	fi
}

get_from_file() {
	FILE="${1}"
	if [ "$2" = 'sort' ]; then
		CHOSEN="$(cut -f2 "$FILE" | shuf | dmenu -i -l 20)" || exit
	else
		CHOSEN="$(cut -f2 "$FILE" | dmenu -i -l 20)" || exit
	fi
	LINE="$(grep -w "$CHOSEN" "$FILE")"
	TITLE="$(cut -f2 <<<"$LINE")"
	URL="$(cut -f3 <<<"$LINE")"
}

save_music () {
	get_title
	printf "%s» %-20s» %s\\t%s\\n%s" "$(date '+%k:%M %d/%m/%y')" "$INFO" "$URL" "$(cat "$PATH_MUSIC")" >"$PATH_MUSIC"
}

music_play() {
	check_ts
	export TS_SOCKET="$TMPDIR/music_socket"
	$TASK_SPOOLER -L "$INFO" mpv --vid=no --volume=60 --speed=1 --keep-open=no --loop-playlist "$URL"
}

check_ts() {
	if command -v tsp >/dev/null 2>&1; then
		TASK_SPOOLER="tsp"
	elif command -v ts >/dev/null 2>&1; then
		TASK_SPOOLER="ts"
	else
		notify-send "Task spooler not found"
		exit
	fi
}

if [ -z "$1" ]; then
	CMDS="queue
enqueue
eplay
aplay
last
music
save_music
music_queue
get_title
info_queue
info_last
edit_queue
edit_last
lectures
local
last_lecture"
	CHOSEN="$(dmenu -i <<<"$CMDS")" || exit
	URL="$(xclip -selection clipboard -o)" >/dev/null
else
	CHOSEN="$1"
	URL="$2"
fi

case "$CHOSEN" in
	queue)
		get_from_file "$PATH_QUEUE" sort
		save_to_last
		fplay
		;;
	eplay)
		save_to_last
		fplay &
		add_to_queue
		;;
	enqueue) add_to_queue ;;
	aplay)
		get_title
		save_to_last
		fplay
		;;
	lectures)
		VIDEOS="${XDG_VIDEOS_DIR:-$HOME/Storage/Videos}"
		CHOSEN="$(find "$VIDEOS/Lectures" -maxdepth 1 | dmenu -i -l 10)" ||
			exit
		mpv "$CHOSEN"
		;;
	local)
		VIDEOS1="$(find ${XDG_VIDEOS_DIR:-$HOME/Storage/Videos} -type d -maxdepth 2)"
		VIDEOS2="$(find "$HOME/Storage/Archive/Torrents/Complete" -type d -maxdepth 2)"
		VIDEOS="${VIDEOS1}\n${VIDEOS2}"
		CHOSEN="$(printf "%s" "$VIDEOS" | dmenu -i -l 20)" ||
			exit
		mpv "$CHOSEN"
		;;
	last)
		get_from_file "$PATH_LAST"
		notify-send "Working on:" "$INFO\\n$URL"
		fplay
		;;
	music)
		save_music
		music_play
		;;
	music_save) save_music ;;
	music_queue)
		get_from_file "$PATH_MUSIC"
		notify-send "Working on:" "$INFO\\n$URL"
		music_play
		;;
	title)
		get_title
		notify-send "Working on:" "[[$URL][$INFO]]"
		printf "[[%s][%s]]" "$URL" "$INFO" | xclip -i -selection clipboard
		;;
	last_lecture) mpv "$VIDEOS/Lectures/doing" ;;
	edit_queue) "$VISUAL" "$PATH_QUEUE" ;;
	edit_last) "$VISUAL" "$PATH_LAST" ;;
	info_queue)
		get_from_file "$PATH_QUEUE"
		TITLE="$(cut -f2 | sed 's/{  }+//' <<< $TITLE)"
		URL="$(cut -f3 <<< $TITLE)"
		notify-send "Yanked:" "$INFO\\n$URL"
		printf "[[%s][%s “%s”]]" "$URL" "$INFO" | xclip -i -selection clipboard
		;;
	info_last)
		get_from_file "$PATH_LAST"
		CHANNEL="${TITLE%   *}"
		CHANNEL="${CHANNEL#*   }"
		CHANNEL="$(sed -e 's/[[:space:]]*$//' <<<"${CHANNEL}")"
		TITLE="${TITLE##*   }"
		notify-send "Yanked:" "$INFO\\n$URL"
		printf "[[%s][%s “%s”]]" "$URL" "$TITLE" "$CHANNEL" | xclip -i -selection clipboard
		;;
	tsv)
		export TS_SOCKET="$TMPDIR/video_socket"
		shift 1
		check_ts
		$TASK_SPOOLER "$@"
		;;
	tsm)
		export TS_SOCKET="$TMPDIR/music_socket"
		shift 1
		check_ts
		$TASK_SPOOLER "$@"
		;;
	*) notify-send "Something wrong..." ;;
esac
