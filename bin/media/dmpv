#!/bin/bash

if [ -z "$1" ]; then
	CMDS="queue
enqueue
eplay
aplay
last
edit_queue
lectures
local
last_lecture"

	CHOSEN="$(dmenu -i <<<"$CMDS")" || exit
	URL="$(xclip -selection clipboard -o)" 2> /dev/null
else
	CHOSEN="$1"
	URL="$2"
fi

VIDEOS_FOLDER="${XDG_VIDEOS_DIR:-$HOME/Storage/Videos}"
PATH_QUEUE="$HOME/.config/mpv/queue"
PATH_LAST="$HOME/.config/mpv/last"

add_to_queue() {
	PLAYLIST="$(: | dmenu -p "Name of the playlist?")"
	[ -z "$PLAYLIST" ] && PLAYLIST="1shot"

	TITLE="$(youtube-dl --no-warnings --dump-single-json "$1" | jq -r '"\(.title) «\(.channel) \(.uploader)»"' | sed 's/«null /«/; s/null»/»/')"
	[ -z "$TITLE" ] && exit

	notify-send "$PLAYLIST:$TITLE" "$1"
	printf "%s:%s «%s»\t%s\n%s" "$PLAYLIST" "$TITLE" "$(date '+%k:%M %d/%m/%y')" "$1" "$(cat "$PATH_QUEUE")" >"$PATH_QUEUE" ||
		notify-send "Failed to queue"
	sort "$PATH_QUEUE" -o "$PATH_QUEUE"
}

open_mpv() {
	echo "$1" >"$PATH_LAST"
	notify-send "Working on" "$1"
	# mpv --geometry=256x144+1660+910 --no-terminal --title="fmpv" "$1"
	mpv --no-terminal "$1"
}

case "$CHOSEN" in
queue)
	CHOSEN="$(cut -f1 "$PATH_QUEUE" | dmenu -i -l 20)" || exit
	LINE="$(grep -w "$CHOSEN" "$PATH_QUEUE")"
	TITLE="$(cut -f1 <<<"$LINE")"
	URL="$(cut -f2 <<<"$LINE")"
	notify-send "$TITLE" "$URL"
	open_mpv "$URL"
	;;

eplay)
	open_mpv "$URL" &
	add_to_queue "$URL"
	;;

enqueue)
	add_to_queue "$URL"
	;;

aplay)
	open_mpv "$URL"
	;;

lectures)
	LECTURES="$VIDEOS_FOLDER/Lectures"
	CHOSEN="$(find "$LECTURES" -maxdepth 1 -type d | cut -d'/' -f7 | dmenu -i -l 20)" || exit
	URL="$LECTURES/$CHOSEN"
	open_mpv "$URL"
	;;

local)
	GENER="$VIDEOS_FOLDER"
	DIR="$(find "$GENER" -maxdepth 1 -type d | cut -d'/' -f6 | dmenu -i -l 20)" || exit
	if [ -d "$GENER$DIR" ]; then
		CHOSEN="$(find "$GENER$DIR" | cut -d'/' -f8 | dmenu -i -l 20)" || exit
		URL="$GENER$DIR/$CHOSEN"
		open_mpv "$URL"
	else
		URL="$GENER$DIR"
		open_mpv "$URL"
	fi
	;;

last)
	mpv "$(cat "$PATH_LAST")"
	;;

last_lecture)
	mpv "$VIDEOS_FOLDER/doing"
	;;

edit_queue)
	$TERMINAL -e nvim "$PATH_QUEUE"
	;;
esac
