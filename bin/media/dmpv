#!/bin/bash

if [ -z "$1" ]; then
	CMDS="queue
enqueue
eplay
aplay
last
music
save_music
music_queue
edit_queue
edit_last
lectures
local
last_lecture"
	CHOSEN="$(dmenu -i <<<"$CMDS")" || exit
	URL="$(xclip -selection clipboard -o)" >/dev/null
else
	CHOSEN="$1"
	URL="$2"
fi
if [ "$(command -v ts)" == "" ];then
   TASK_SPOOLER="tsp"
else
   TASK_SPOOLER="ts"
fi

export TS_SOCKET="/tmp/ts_dmpv"
VIDEOS="${XDG_VIDEOS_DIR:-$HOME/Storage/Videos}"
PATH_QUEUE="$HOME/.config/mpv/queue"
PATH_LAST="$HOME/.config/mpv/last"
PATH_MUSIC="$HOME/.config/mpv/music"
TITLE=""
CHANNEL=""
GEOM=""

get_title() {
	JSON="$(yt-dlp --no-warnings --dump-single-json "$URL")"
	TITLE="$(jq -r '.title' <<<"$JSON")"
	CHANNEL="$(jq -r '.uploader,.channel' <<<"$JSON" | uniq -i | sed '/null/d')"
	[ -z "$TITLE" ] && notify-send "could not retrieve title" && exit
}

add_to_queue() {
	PLAYLIST="$(: | dmenu -p "Name of the playlist?")"
	[ -z "$PLAYLIST" ] && PLAYLIST="1shot"
	get_title
	notify-send "$PLAYLIST:$TITLE $CHANNEL" "$URL"
	printf "%s: %s (%-15s) «%s»\\t%s\\n" "$PLAYLIST" "$TITLE" "$CHANNEL" "$(date '+%k:%M %d/%m/%y')" "$URL" >>"$PATH_QUEUE"
	sort -u "$PATH_QUEUE" -o "$PATH_QUEUE"
}

floating() {
	dim_screen="$(xrandr | awk '/current/ {sub(",","",$10); print $8$9$10}')"
	dim_mon_x="$(echo "$dim_screen" | cut -d'x' -f1)"
	dim_mon_y="$(echo "$dim_screen" | cut -d'x' -f2)"
	dim_w_x="$((dim_mon_x/6))"
	dim_w_y="$((dim_mon_y/6))"
	x="$((dim_mon_x - dim_w_x - 5))"
	y="$((dim_mon_y - dim_w_y - 40))"		# bottom bar
	# y="$((dim_mon_y - dim_w_y - 5))"		# top bar
	GEOM="$(printf "%sx%s+%s+%s" "$dim_w_x" "$dim_w_y" "$x" "$y")"
}

save_to_last() {
	printf "%s: %-20s: %s\t%s\n%s" "$(date '+%k:%M %d/%m/%y')" "$CHANNEL" "$TITLE" "$URL" "$(cat "$PATH_LAST")" >"$PATH_LAST"
}

fplay() {
	floating
	notify-send "Working on:" "$TITLE «$CHANNEL»\\n$URL"
	$TASK_SPOOLER -L "$TITLE «$CHANNEL»" mpv --quiet --video=auto --geometry="$GEOM" --x11-name="mpvFloat" "$URL"
}

get_from_file(){
	FILE="${1}"
	CHOSEN="$(cut -f1 "$FILE" | dmenu -i -l 20)" || exit
	LINE="$(grep -w "$CHOSEN" "$FILE")"
	TITLE="$(cut -f1 <<<"$LINE")"
	URL="$(cut -f2 <<<"$LINE")"
}

save_music () {
	get_title
	printf "%s: %-20s: %s\\t%s\\n%s" "$(date '+%k:%M %d/%m/%y')" "$CHANNEL" "$TITLE" "$URL" "$(cat "$PATH_MUSIC")" >"$PATH_MUSIC"
}

music_play() {
		mpv --vid=no --volume=60 --speed=1 --keep-open=no --loop-playlist "$URL"
}

case "$CHOSEN" in
	queue) get_from_file "$PATH_QUEUE"
		   save_to_last
		   fplay ;;
	eplay) save_to_last
		   fplay &
		   add_to_queue ;;
	enqueue) add_to_queue ;;
	aplay) get_title
		   save_to_last
		   fplay ;;
	lectures)
		CHOSEN="$(find "$VIDEOS" -type d -path "*/Lectures/*" | dmenu -i -l 10)" ||
			exit
		mpv "$CHOSEN"
		;;
	local)
		CHOSEN="$(find "$VIDEOS" -type d | dmenu -i -l 20)" ||
			exit
		mpv "$CHOSEN"
		;;
	last) get_from_file "$PATH_LAST"
		  notify-send "Working on:" "$TITLE «$CHANNEL»\\n$URL"
		  fplay	;;
	music) save_music
		   music_play ;;
	music_save) save_music ;;
	music_queue) get_from_file "$PATH_MUSIC"
				 notify-send "Working on:" "$TITLE «$CHANNEL»\\n$URL"
				 music_play ;;
	last_lecture) mpv "$VIDEOS/Lectures/doing" ;;
	edit_queue)	"$VISUAL" "$PATH_QUEUE" ;;
	edit_last)	"$VISUAL" "$PATH_LAST" ;;
	ts)	shift 1
		$TASK_SPOOLER "$@" ;;
	*) notify-send "Something wrong..." ;;
esac
