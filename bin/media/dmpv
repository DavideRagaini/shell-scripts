#!/bin/sh

DIR="$HOME/.config/mpv/"
PATH_QUEUE="$DIR/queue"
PATH_LAST="$DIR/last"
PATH_MUSIC="$DIR/music"

get_title() {
    if ! INFO="$(yt-dlp --playlist-end=1 --print "%(uploader,channel)-26s%(playlist_title,title)-100s" "$URL" 2>&1)"
	then
		notify-send "Error Adding to Queue" "$INFO"
		exit
	fi
	notify-send "Added to Queue" "$INFO"
}

add_to_queue() {
	PLAYLIST="$(» | dmenu -p "Name of the playlist?")"
	[ -z "$PLAYLIST" ] && PLAYLIST="1shot"
	get_title
	notify-send "$PLAYLIST» $INFO" "$URL"
	printf "%-18s%s\t%s\t%s\n" "$(date '+%k:%M %d/%m/%y')" "$PLAYLIST" "$INFO" "$URL" >>"$PATH_QUEUE"
	sort -u "$PATH_QUEUE" -o "$PATH_QUEUE"
}

save_to_last() {
	INFO="$(yt-dlp --playlist-end=1 --print "%(uploader,channel)-25s%(playlist_title,title)-100s" "$URL")"
	grep -q "$INFO" "$PATH_LAST" ||
		printf "%-14s\t%s\t%-70s\n%s" \
			"$(date '+%k:%M %d/%m/%y')" \
			"$INFO" \
			"$URL" \
			"$(cat "$PATH_LAST")" >"$PATH_LAST"
}

fplay() {
	notify-send "Working on:" "$INFO\\n$URL"
    if pidof -q dwm; then
        dim_screen="$(xrandr | awk '/current/ {sub(",","",$10); print $8$9$10}')"
        dim_mon_x="$(echo "$dim_screen" | cut -d'x' -f1)"
        dim_mon_y="$(echo "$dim_screen" | cut -d'x' -f2)"
        dim_w_x="$((dim_mon_x / 6))"
        dim_w_y="$((dim_mon_y / 6))"
        x="$((dim_mon_x - dim_w_x - 3))"
        y="$((dim_mon_y - dim_w_y - 20))"
        GEOM="$(printf "%sx%s+%s+%s" "$dim_w_x" "$dim_w_y" "$x" "$y")"
        mpv --no-terminal --geometry="$GEOM" --x11-name="mpvFloat" "$URL"
    else
        mpv --no-terminal --x11-name="mpvFloat" "$URL"
    fi
}

get_from_file() {
	if [ "$2" = 'sort' ]; then
		CHOSEN="$(cut -f2 "$1" | shuf | dmenu -i -l 20)" || exit
	else
		CHOSEN="$(cut -f2 "$1" | dmenu -i -l 20)" || exit
	fi
	LINE="$(grep -w "$CHOSEN" "$1")"
	TITLE="$(echo "$LINE" | cut -f2)"
	URL="$(echo "$LINE" | cut -f3)"
}

save_music () {
	get_title
	printf "%s\t%s\t%s\n%s" \
		"$(date '+%k:%M %d/%m/%y')" \
		"$INFO" \
		"$URL" \
		"$(cat "$PATH_MUSIC")" >"$PATH_MUSIC"
}

music_play() {
	mpv --vid=no --volume=60 --speed=1 --keep-open=no --loop-playlist "$URL"
}

if [ -z "$1" ]; then
	CMDS="queue
enqueue
eplay
aplay
last
playlist
music
save_music
music_queue
get_title
save_m3u
info_queue
info_last
edit_queue
edit_last
lectures
local
last_lecture"
	CHOSEN="$(echo "$CMDS" | dmenu -i)" || exit
	URL="$(xclip -selection clipboard -o)" >/dev/null
else
	CHOSEN="$1"
	URL="$2"
fi

case "$CHOSEN" in
	queue)
		get_from_file "$PATH_QUEUE" sort
		save_to_last
		fplay
		;;
	eplay)
		save_to_last
		fplay &
		add_to_queue
		;;
	enqueue) add_to_queue ;;
	aplay)
		get_title
		save_to_last
		fplay
		;;
	lectures)
		VIDEOS="${XDG_VIDEOS_DIR:-$HOME/Storage/Videos}"
		CHOSEN="$(find "$VIDEOS/Lectures" -mindepth 1 -maxdepth 1 | dmenu -i -l 10)" ||
			exit
		mpv "$CHOSEN"
		;;
	'local')
		VIDEOS1="$(find "${XDG_VIDEOS_DIR:-$HOME/Storage/Videos}" -type d -maxdepth 2)"
		VIDEOS2="$(find "$HOME/Storage/Archive/Torrents/Complete" -type d -maxdepth 2)"
		VIDEOS="${VIDEOS1}\n${VIDEOS2}"
		CHOSEN="$(printf "%s" "$VIDEOS" | dmenu -i -l 20)" ||
			exit
		mpv "$CHOSEN"
		;;
	last)
		get_from_file "$PATH_LAST"
		notify-send "Working on:" "$INFO\\n$URL"
		fplay
		;;
	save_m3u)
		PLAYLIST="$(» | dmenu -p "Name of the playlist?")"
		yt-dlp -O "#EXTINF:%(duration)s,%(upload_date>%d/%m/%Y)s %(title)s" "$URL" > "$DIR/playlist/$PLAYLIST"
		;;
	playlist)
		find "$HOME/.config/mpv/playlists" -type f |
			dmenu -i -l 10 |
			xargs -r mpv
		;;
	music)
		save_music
		music_play
		;;
	music_save) save_music ;;
	music_queue)
		get_from_file "$PATH_MUSIC"
		notify-send "Working on:" "$INFO\\n$URL"
		music_play
		;;
	title)
		get_title
		notify-send "Working on:" "[[$URL][$INFO]]"
		printf "[[%s][%s]]" "$URL" "$INFO" | xclip -i -selection clipboard
		;;
	last_lecture) mpv "$VIDEOS/Lectures/doing" ;;
	edit_queue) "$VISUAL" "$PATH_QUEUE" ;;
	edit_last) "$VISUAL" "$PATH_LAST" ;;
	info_queue)
		get_from_file "$PATH_QUEUE"
		TITLE="$(echo "$TITLE" | cut -f2)"
		URL="$(echo "$TITLE" | cut -f3)"
		notify-send "Yanked:" "$INFO\\n$URL"
		printf "[[%s][%s]]" "$URL" "$INFO" | xclip -i -selection clipboard
		;;
	info_last)
		get_from_file "$PATH_LAST"
		notify-send "Yanked:" "$INFO\\n$URL"
		printf "[[%s][%s]]" "$URL" "$INFO"| xclip -i -selection clipboard
		;;
	*) notify-send "Something wrong..." ;;
esac
