#!/bin/sh
# TODO set function
# TODO list all function
# TODO Make more general porpouse via abstract api
# TODO chosen variable strip function

actions() {
    case $1 in
        toggle) echo cycle pause | socat - "$2" ;;
        play) echo '{ "command": ["set_property", "pause", false] }' | socat - "$2" ;;
        pause) echo '{ "command": ["set_property", "pause", true] }' | socat - "$2" ;;
        next) echo playlist-next | socat - "$2" ;;
        prev) echo playlist-prev | socat - "$2" ;;
        fseek) echo seek 10 | socat - "$2" ;;
        bseek) echo seek -10 | socat - "$2" ;;
    esac
}

[ -z "$1" ] && echo "Missing arguments" && exit
instances="$(find "/tmp/mpvSockets" -type s)"

case "$1" in
    "pause_all")
        for i in $instances; do
            echo '{ "command": ["set_property", "pause", true] }' |
                socat - "$i"
        done
        ;;
    "invert")
        for i in $instances; do
            echo '{ "command": ["cycle", "pause"] }' |
                socat - "$i"
        done
        ;;
    "set")
        [ -z "$2" ] && echo "Property needed; exiting"
        echo "$2"
        for i in $instances; do
            titles="$(echo '{ "command": ["get_property", "media-title"] }' | socat - "$i" | jq -r '.data')"
            list="$(printf "%s%s (%s)\n " "$list" "$titles" "$i")"
        done
        chosen="$(echo "$list" | sed '/^ $/d' | dmenu -i -l 5 -p "Which to set?")"
        chosen="$(echo "$list" | sed '/^ $/d' | dmenu -i -l 5 -p "Which to set?")"
        echo "{ \"command\": [\"set_property\", \"${2}\", \"$3\"] }" | socat - "$chosen"
        ;;
    "info")
        [ -z "$2" ] && echo "Property needed; exiting"
        echo "$2"
        for i in $instances; do
            properties="$(echo "{ \"command\": [\"get_property\", \"${2}\"] }" | socat - "$i" | jq -r '.data')"
            list="$(printf "%s%s (%s)\n " "$list" "$properties" "$i")"
        done
        echo "$list"
        ;;
    "title")
        for i in $instances; do
            titles="$(echo '{ "command": ["get_property", "media-title"] }' | socat - "$i" | jq -r '.data')"
            list="$(printf "%s%s (%s)\n " "$list" "$titles" "$i")"
        done
        if [ "$(echo "$titles" | wc -l)" -eq 1 ]; then
            chosen="$(echo "$list" | sed '/^ $/d' )"
        else
            chosen="$(echo "$list" | sed '/^ $/d' | dmenu -i -l 5 -p "Get info from?")"
        fi
        info="$(echo "$chosen" | sed 's/.*(\(.*\))/\1/')"
        title="$(echo '{ "command": ["get_property", "media-title"] }' | socat - "$info" | jq -r '.data')"
        path="$(echo '{ "command": ["get_property", "path"] }' | socat - "$info" | jq -r '.data')"
        # notify-send "Yanked:" "$title\n$path"
        echo "[[$path][$title]]" # | xclip -i -selection clipboard
        ;;
    *)
        if [ "$(echo "$instances" | wc -l)" -eq 1 ]; then
            actions "$1" "$instances"
        else
            list=" "
            for i in $instances; do
                titles="$(echo '{ "command": ["get_property", "media-title"] }' | socat - "$i" | jq -r '.data')"
                list="$(printf "%s%s (%s)\n " "$list" "$titles" "$i")"
            done
            chosen="$(echo "$list" | sed '/^ $/d' | dmenu -i -l 5 -p "Toggle which?")"
            actions "$1" "$(echo "$chosen" | sed 's/.*(\(.*\))/\1/')"
        fi
        ;;
esac
