#!/bin/sh

[ -z "$1" ] && echo "Missing arguments" && exit
SOCKETS="$(find "/tmp/mpvSockets" -type s)"

set_all() {
  for i in $SOCKETS; do
    echo "${1}" |
      socat -d - "$i"
  done
}

choose_instance() {
  if [ "$(echo "$SOCKETS" | wc -l)" -eq 1 ]; then
    CHOSEN="$SOCKETS"
  else
    for i in $SOCKETS; do
      TITLES="$(echo '{ "command": ["get_property", "media-title"] }' | socat -d - "$i" | jq -r '.data')"
      STATUS="$(echo '{ "command": ["get_property", "pause"] }' | socat -d - "$i" | jq -r '.data')"
      if [ "$STATUS" = 'true' ]; then
          STATUS=''
      elif [ "$STATUS" = 'false' ]; then
          STATUS=''
      fi
      LIST="${LIST}${STATUS} ${TITLES} (${i})\n"
    done
    CHOSEN="$(echo "${LIST}" | dmenu -i -l 5 -p "$1")"
  fi
  CHOSEN="${CHOSEN##*(}"
  CHOSEN="${CHOSEN%%)*}"
}

case "$1" in
  toggle)
    choose_instance "Toggle:"
    echo cycle pause | socat -d - "$CHOSEN"
    ;;
  play)
    choose_instance "Play:"
    echo '{ "command": ["set_property", "pause", "false"] }' |
      socat -d - "$CHOSEN"
    ;;
  pause)
    choose_instance "Pause:"
    echo '{ "command": ["set_property", "pause", "true"] }' |
      socat -d - "$CHOSEN"
    ;;
  pauseall) set_all '{ "command": ["set_property", "pause", true] }' ;;
  invert) set_all '{ "command": ["cycle", "pause"] }' ;;
  prev)
    choose_instance "Previous:"
    echo "playlist-prev" | socat -d - "$CHOSEN"
    ;;
  next)
    choose_instance "Next:"
    echo "playlist-next" | socat -d - "$CHOSEN"
    ;;
  info)
    choose_instance "Info:"
    TITLE="$(echo '{ "command": ["get_property", "media-title"] }' | socat -d - "$CHOSEN" | jq -r '.data')"
    PATH="$(echo '{ "command": ["get_property", "path"] }' | socat -d - "$CHOSEN" | jq -r '.data')"
    echo "[[$PATH][$TITLE]]" # | xclip -i -selection clipboard
    ;;
  seek)
    choose_instance "Seek:"
    echo seek "$2" | socat -d - "$CHOSEN"
    ;;
  get)
    choose_instance "Get:"
    PROPERTY="$(echo "{ \"command\": [\"get_property\", \"${2}\"] }" | socat -d - "$CHOSEN" | jq -r '.data')"
    notify-send "Get Property" "$2: $PROPERTY"
    echo "$PROPERTY"
    ;;
  'set')
    choose_instance "Set:"
    PROPERTY="$(echo ${2} | cut -d' ' -f1)"
    VALUE="$(echo ${2} | cut -d' ' -f2)"
    notify-send "Set Property" "$PROPERTY: $VALUE"
    echo "{ \"command\": [\"set_property\", \"$PROPERTY\", \"$VALUE\"] }" |
      socat -d - "$CHOSEN"
    ;;
  subtitle)
    choose_instance "Add subtitle to:"
    echo "{ \"command\": [\"set_property\", \"sub-files\", \"$2\"] }" |
      socat -d - "$CHOSEN"
    ;;
  vid | video)
    if [ -n "$2" ]; then
      VALUE="$2"
    else
      VALUE="$(printf "on\noff" | dmenu -i)"
    fi
    choose_instance "Set video:"
    [ "$VALUE" = 'on' ] && VALUE=1
    [ "$VALUE" = 'off' ] && VALUE='no'
    notify-send "Set Property" "vid: $VALUE"
    echo "{ \"command\": [\"set_property\", \"vid\", \"$VALUE\"] }" |
      socat -d - "$CHOSEN"
    ;;
  direct) echo "$2" | socat -d - "$CHOSEN" ;;
  add)
    choose_instance "Append:"
    echo "{ command: [ \"loadfile\", \"$2\", \"append-play\" ] }" |
      socat -d - "$CHOSEN"
    ;;
  help)
    echo \
      "MPV IPC Socket Basic Controller

USAGE:
tppctl Options [property]

OPTIONS:
  toggle / play / pause
  pause all / invert
  prev /next
  get [property]
  set [property]
  direct [string]
  info [property]
  seek [property]
  help"
    exit
    ;;
esac
